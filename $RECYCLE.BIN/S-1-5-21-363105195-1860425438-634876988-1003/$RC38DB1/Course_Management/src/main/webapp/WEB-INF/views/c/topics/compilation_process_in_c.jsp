<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<link rel="stylesheet" href="/app/python.css">
</head>
<body>
	<div class="container-fluid" id="pagecontext">
		<h1 class="h1">Compilation process in c</h1>
		<h2 class="h2">What is a compilation?</h2>
		<p>The compilation is a process of converting the source code into
			object code. It is done with the help of the compiler. The compiler
			checks the source code for the syntactical or structural errors, and
			if the source code is error-free, then it generates the object code.</p>
		<img
			src="https://static.javatpoint.com/cpages/images/compilation-process-in-c.png"
			alt="Compilation process in c" />
		<p>The c compilation process converts the source code taken as
			input into the object code or machine code. The compilation process
			can be divided into four steps, i.e., Pre-processing, Compiling,
			Assembling, and Linking.</p>
		<p>
			The preprocessor takes the source code as an input, and it removes
			all the comments from the source code. The preprocessor takes the
			preprocessor directive and interprets it. For example, if <strong>&lt;stdio.h&gt;,</strong>
			the directive is available in the program, then the preprocessor
			interprets the directive and replace this directive with the content
			of the <strong>'stdio.h'</strong> file.
		</p>
		<p>The following are the phases through which our program passes
			before being transformed into an executable form:</p>
		<ul class="points">
			<li><strong>Preprocessor</strong></li>
			<li><strong>Compiler</strong></li>
			<li><strong>Assembler</strong></li>
			<li><strong>Linker</strong></li>
		</ul>
		<img
			src="https://static.javatpoint.com/cpages/images/compilation-process-in-c2.png"
			alt="Compilation process in c" />
		<h3 class="h3">Preprocessor</h3>
		<p>The source code is the code which is written in a text editor
			and the source code file is given an extension ".c". This source code
			is first passed to the preprocessor, and then the preprocessor
			expands this code. After expanding the code, the expanded code is
			passed to the compiler.</p>
		<h3 class="h3">Compiler</h3>
		<p>The code which is expanded by the preprocessor is passed to the
			compiler. The compiler converts this code into assembly code. Or we
			can say that the C compiler converts the pre-processed code into
			assembly code.</p>
		<h3 class="h3">Assembler</h3>
		<p>
			The assembly code is converted into object code by using an
			assembler. The name of the object file generated by the assembler is
			the same as the source file. The extension of the object file in DOS
			is '.obj,' and in UNIX, the extension is 'o'. If the name of the
			source file is <strong>'hello.c',</strong> then the name of the
			object file would be 'hello.obj'.
		</p>
		<h3 class="h3">Linker</h3>
		<p>Mainly, all the programs written in C use library functions.
			These library functions are pre-compiled, and the object code of
			these library files is stored with '.lib' (or '.a') extension. The
			main working of the linker is to combine the object code of library
			files with the object code of our program. Sometimes the situation
			arises when our program refers to the functions defined in other
			files; then linker plays a very important role in this. It links the
			object code of these files to our program. Therefore, we conclude
			that the job of the linker is to link the object code of our program
			with the object code of the library files and other files. The output
			of the linker is the executable file. The name of the executable file
			is the same as the source file but differs only in their extensions.
			In DOS, the extension of the executable file is '.exe', and in UNIX,
			the executable file can be named as 'a.out'. For example, if we are
			using printf() function in a program, then the linker adds its
			associated code in an output file.</p>
		<p class="pq">
			<strong>Let's understand through an example.</strong>
		</p>
		<p>
			<strong>hello.c</strong>
		</p>
		<div class="codeblock">
			<textarea name="code" class="cpp">
#include <stdio.h>
int main()
{
    printf("Hello javaTpoint");
    return 0;
}
</textarea>
		</div>
		<p>
			<strong>Now, we will create a flow diagram of the above
				program:</strong>
		</p>
		<img
			src="https://static.javatpoint.com/cpages/images/compilation-process-in-c3.png"
			alt="Compilation process in c" />
		<p>
			<strong>In the above flow diagram, the following steps are
				taken to execute a program:</strong>
		</p>
		<ul class="points">
			<li>Firstly, the input file, i.e., <strong>hello.c,</strong> is
				passed to the preprocessor, and the preprocessor converts the source
				code into expanded source code. The extension of the expanded source
				code would be <strong>hello.i.</strong></li>
			<li>The expanded source code is passed to the compiler, and the
				compiler converts this expanded source code into assembly code. The
				extension of the assembly code would be <strong>hello.s.</strong>
			</li>
			<li>This assembly code is then sent to the assembler, which
				converts the assembly code into object code.</li>
			<li>After the creation of an object code, the linker creates the
				executable file. The loader will then load the executable file for
				the execution.</li>
		</ul>
		<hr />
		<div class="nexttopicdiv">
			<span class="nexttopictext">Next Topic</span><span
				class="nexttopiclink"><a href="printf-scanf">printf() and
					scanf() in C</a></span>
		</div>

		<br />
		<br />
		<div id="bottomnext">
			<a style="float: left" class="next" href="first-c-program">&larr;
				prev</a> <a style="float: right" class="next" href="printf-scanf">next
				&rarr;</a>
		</div>
		<br />
		<br />
		</td>
		</tr>
		</table>
	</div>
	</div>
</body>
</html>